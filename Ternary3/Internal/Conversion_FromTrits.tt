<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
namespace Ternary3.Internal;

internal static partial class Conversion
{
    /// <summary>
    /// Converts an integer value from a long form that makes performing trit operations easy.
    /// The longer form uses three bits form one trit: 01 = down, 00 is middle, 10 is up.
    /// This way, the actual value is limited to 64 trits.
    /// However, long have values between -9223372036854775808 and 9223372036854775807.
    /// The long value is limited to 40 trits, having values between -6078832729528464400 and 6078832729528464400
    /// </summary>
    /// <param name="value">The value to convert. No check is done to ensure the correct format.</param>
    internal static long ToInt64(this (ulong high, ulong low) value)
    {
        return (
            ((long)(value.low >> 1) & 1) - (long)(value.low & 1)
<# 
    var shift = 0;
    long factor = 1;
    while (shift<62)
    {
        shift+=2;
        factor*=3;
#>
            + <#=factor#>L * ((long)((value.low >> <#=(shift+1)#>) & 1) - (long)((value.low >> <#=shift#>) & 1))
<# }
        shift+=2;
        factor*=3;
#>
            + <#=factor#>L * ((long)(value.high >> 1) & 1) - (long)(value.high & 1)
<# 
    while (shift<78)
    {
        shift+=2;
        factor*=3;
#>
            + <#=factor#>L * ((long)((value.high >> <#=(shift-65)#>) & 1) - (long)((value.high >> <#=shift-64#>) & 1))
<# } #>
        );
    }

    /// <summary>
    /// Converts an integer value from a long form that makes performing trit operations easy.
    /// The longer form uses three bits form one trit: 01 = down, 00 is middle, 10 is up.
    /// This way, the actual value is limited to 20 trits.
    /// </summary>
    /// <param name="value">The value to convert. No check is done to ensure the correct format.</param>
    internal static int ToInt32(this ulong value)
    {
        return (int)(
            (int)((value >> 1) & 1) - (int)(value & 1)
<# 
    shift = 0;
    factor = 1;
    while (shift<62)
    {
        shift+=2;
        factor*=3;
#>
            + <#=factor#> * ((int)((value >> <#=(shift+1)#>) & 1) - (int)((value >> <#=shift#>) & 1))
<# } #>
        );
    }

    /// <summary>
    /// Converts an integer value from a long form that makes performing trit operations easy.
    /// The longer form uses three bits form one trit: 01 = down, 00 is middle, 10 is up.
    /// This way, the actual value is limited to 9 trits.
    /// </summary>
    /// <param name="value">The value to convert. No check is done to ensure the correct format.</param>
    internal static int ToInt32(this uint value)
    {
        return (int)((value >> 1) & 1) - (int)(value & 1)<# 
    shift = 0;
    factor = 1;
    while (shift<30)
    {
        shift+=2;
        factor*=3;
#>

            + <#=factor#> * ((int)((value >> <#=(shift+1)#>) & 1) - (int)((value >> <#=shift#>) & 1))<# } #>;
    }
}
