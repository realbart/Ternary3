<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
namespace Ternary3;

internal static partial class TribbleOperations
{
<# 
// uu_uuu_uuu_uuu_uuu_uuu_uuu
var ups = 1743392200;
var factor = 1152921504606846976;
#>
    /// <summary>
    /// Very quickly converts an integer value to a long form that makes performing trit operations easy.
    /// The longer form uses three bits form one trit: 001 = down, 010 is middle, 100 is up.
    /// This way, the actual value is limited to 20 trits, between -<#=ups#> and <#=ups#>.
    /// </summary>
    /// <param name="value">The value to convert. Make sure this is between -<#=ups#> and <#=ups#></param>
    internal static long ToTritInt64(this int value)
    {
<# // performance critical: caller should check limits #>
<# // if (value > \<#=ups\#> || value <  -\<#=ups\#>) throw new ArgumentException($"Int32 {value} has more than 20 trits"); #>
        if (value > -9842 && value < 9842) return ToTritInt32(value) + 329406144135036928;
        long target = 0;
<#
while (ups>2)
{
    ups/=3;
    factor/=8;
#>

        if (value > <#=ups#>)
        {
            value -= <#=2*ups+1#>;
            target |= <#=factor*4#>;
        }
        else if (value < <#=-ups#>)
        {
            value += <#=2*ups+1#>;
            target |= <#=(factor)#>;
        }
        else
        {
            target |= <#=factor*2#>;
        }<# } #>

        if (value > 0)
        {
            target |= 4;
        }
        else if (value < 0)
        {
            target |= 1;
        }
        else
        {
            target |= 2;
        }

        return target;
    }
<# 
// uuu_uuu_uuu
ups = 9841;
factor = 134217728;
#>
    /// <summary>
    /// Very quickly converts an integer value to a long form that makes performing trit operations easy.
    /// The longer form uses three bits form one trit: 001 = down, 010 is middle, 100 is up.
    /// This way, the actual value is limited to 9 trits, between -<#=ups#> and <#=ups#>.
    /// </summary>
    /// <param name="value">The value to convert. Make sure this is between -<#=ups#> and <#=ups#></param>
    internal static int ToTritInt32(this int value)
    {
<# // performance critical: caller should check limits #>
<# // if (value > \<#=ups\#> || value <  -\<#=ups\#>) throw new ArgumentException($"Int32 {value} has more than 20 trits"); #>
        var target = 0;
<#
while (ups>2)
{
    ups/=3;
    factor/=8;
#>

        if (value > <#=ups#>)
        {
            value -= <#=2*ups+1#>;
            target |= <#=factor*4#>;
        }
        else if (value < <#=-ups#>)
        {
            value += <#=2*ups+1#>;
            target |= <#=(factor)#>;
        }
        else
        {
            target |= <#=factor*2#>;
        }<# } #>

        if (value > 0)
        {
            target |= 4;
        }
        else if (value < 0)
        {
            target |= 1;
        }
        else
        {
            target |= 2;
        }

        return target;
    }
}
